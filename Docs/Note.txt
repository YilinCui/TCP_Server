1. 代码复用性差，覆盖面不全，只能覆盖80%-90%的功能，剩下的还是需要手动测试
2. 对复杂业务逻辑的处理能力不强。很多时候都得特殊情况特殊处理。比如不可预见的UI弹窗，测试之前需要手动将这些弹窗全部禁用。单独的测试流程容易被触发性的弹窗或者引导提示打断，如果在单条测试中做过多的判断，又会让单条测试用例变得臃肿，从而让所有的测试用例都变得臃肿而且难于维护和更新。（但是虚设备的Configuration parameter preset就可以解决这个问题，真是太厉害啦）
3. 异步处理的SDK做的不全。很多地方有BUG，idlingResource没想象中的那么好用 （Espresso的异步处理机制就是垃圾，当然也可能是我不会用）


6/28
1. Failure Handler 异常捕获范围过宽，导致真正的异常信息被掩盖。本来CustomFailureHandler是用来处理UI弹窗阻碍测试的，但逻辑处理有问题，导致本来不应该被送入这个FailureHandler的异常也被送进去处理了。
2. 异步处理逻辑不清晰。程序在program或者retrive时都需要异步等待，如何妥善处理依然是个重要的问题

7/8
1.这个虚设备也太抽象了，谁能把写出简直太厉害（现在看来底层逻辑也是相当简单，就是负责传输数据。数据操作就是另一个故事）

7/10
1. 虚设备，理想情况是将模拟数据的逻辑从源代码里剥离出来。源代码里只需要改连接方式，从BLE改成TCP。send ICDCommand单独放一个程序里
2. 扫描设备时，用全局变量去控制是TCP还是BLE连接。如果是TCP，会直接通过socket和虚设备程序建立连接，然后一直从虚设备处读取ICDCommand。

问题
1. 所有操作，比如program和retrieve，是不是都要检查蓝牙连接状态
2. 数据发包是以ICDCommand的方式进行的？需不需要再回到communication protocol layer？还是一直停留在应用层？
8/1 必须尽可能不动底层通讯层。所有数据传输固定在通信层，数据处理固定在应用层。逻辑清晰代码才不容易出bug

7/13
1. TCP连接打通了，也都能互相传数据，封包解包算法也都有模型了。但是server该发哪些数据回去？这个得回去看真正的设备传输数据吧？好麻烦
2.  client端对于接收数据的逻辑是不是还没写好？？这个是问题重点

7/26
1. 之前的问题貌似都解决了。框架前期搭的好，后面填东西就更高效
2. 虚设备并没有一开始想象的那么难。逻辑理清楚后还是很简单的

7/28
1. 加了很多测试新需求，需要仔细思考代码架构和data-flow

8/1
1. 代码架构上貌似没有什么要大改的，多亏之前框架搭建的不错
2. 每次查看elementId时最好ctrl+左键确认下有没有存在duplicate element id的情况。不然测试时会导致Ambigous View的异常
3. 思考题：Espresso从虚设备那里拿到rawData后，必须得在本地再重新handle一遍data吗？有没有更简单的方式？比如把处理好的数据，转为byte[]再发过去？

问题：
1. Espresso和虚设备，两边都预定义TestCase。这样每个TestCase时虚设备只需要告诉虚设备TestCase ID，虚设备就可以自动按预定义的testcase feed data
2. 但是预定义数据的方式太不方便了。每个TestCase都得手动定义数据，万一有成百上千个Case呢

8/2
1. 有个mode = 2, reason = 0。也就是Monitor+Therapy; None的不显示。原来Reason为None不会被记录到日志里
2. OnData方法设计的，ListView在check某个position时，如果当前视图不可见，它会自动下拉列表

8/3
1. 发的0x0C，返回的却是0x0D ？？？

8/9
1. 如何进入Storage Mode